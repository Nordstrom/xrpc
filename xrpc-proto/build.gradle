buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
  }
}

plugins {
  id 'com.github.sherter.google-java-format' version '0.6'
  id 'net.researchgate.release' version '2.4.0'
}

release {
  preTagCommitMessage = 'Updating to release version '
  tagCommitMessage = 'New release: '
  newVersionCommitMessage = 'Creating new SNAPSHOT version '
  git {
    pushToRemote = 'upstream'
  }
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply plugin: 'com.github.johnrengelman.shadow'

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.nordstrom.xrpc'
archivesBaseName = 'xrpc-proto'

description = """Simple, production ready Java API server built on top of functional composition."""

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
}

checkstyle {
  toolVersion = '8.3'
}

test {
  useJUnitPlatform()
}

dependencies {
  compile 'com.google.guava:guava:21.0'
  compile 'com.google.protobuf:protobuf-java:3.0.0'
  compile 'com.google.protobuf:protobuf-java-util:3.0.0'
  compile 'org.projectlombok:lombok:1.16.20'
  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'com.salesforce.servicelibs:jprotoc:0.8.0'
  testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
  testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
  runtimeOnly 'ch.qos.logback:logback-classic:1.1.7'
  runtimeOnly 'ch.qos.logback:logback-core:1.1.7'
  runtimeOnly 'org.codehaus.groovy:groovy-all:2.4.1'
}

shadowJar {
  manifest {
    attributes 'Main-Class': 'com.nordstrom.xrpc.proto.ProtoPlugin'
  }
}


// Add Javadoc + sources jars to artifacts list.
task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}
task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

// Run javadoc as part of the `check` task.
check.dependsOn(javadoc)

def pomExtra = {
  scm {
    connection 'scm:git:git@github.com:Nordstrom/xrpc.git'
    developerConnection 'scm:git:git@github.com:Nordstrom/xrpc.git'
    url 'https://github.com/Nordstrom/xrpc'
  }

  licenses {
    license {
      name 'The Apache License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
  }

  developers {
    developer {
      id 'jkinkead'
      name 'Jesse Kinkead'
      email 'jesse.kinkead@nordstrom.com'
    }
    developer {
      id 'xjdr'
      name 'Jeff Rose'
      email 'jeff.rose@nordstrom.com'
    }
    developer {
      id 'andyday'
      name 'Andy Day'
      email 'andy.day@nordstrom.com'
    }
  }
}

publishing {
  publications {
    xrpcProtoMaven(MavenPublication) {
      from components.java
      groupId group
      artifactId archivesBaseName
      version version
      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        asNode().appendNode('description', description)
        asNode().appendNode('name', 'xrpc-proto plugin')
        asNode().appendNode('url', 'https://github.com/Nordstrom/xrpc')
        asNode().children().last() + pomExtra
      }
    }
  }
}
