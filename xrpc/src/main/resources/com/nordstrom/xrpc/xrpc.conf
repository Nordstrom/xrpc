# Default configuration for an xrpc application.

# The port to run on.
server.port = 8080

admin_routes = {
  # If true, serve informational admin routes. See https://github.com/Nordstrom/xrpc#admin-routes .
  enable_info = true
  # If true, serve unsafe admin routes. See https://github.com/Nordstrom/xrpc#admin-routes .
  enable_unsafe = false
}

# The maximum HTTP payload allowed, for HTTP/2 and HTTP/1.x requests.
# Netty HTTP/1.x support requires that this be an integer, so values greater than 2Gi are not
# supported.
max_payload_bytes = 10Mi

# The maximum allowed time between reads before timing out. Set to zero to disable read timeouts.
reader_idle_timeout_seconds = 200
# The maximum allowed time between writes before timing out. Set to zero to disable write timeouts.
writer_idle_timeout_seconds = 400
# The maximum allowed time between either read or write before timing out. Set to zero to disable
# this kind of timeout.
all_idle_timeout_seconds = 0

# The thread name format. See:
# http://google.github.io/guava/releases/23.0/api/docs/com/google/common/util/concurrent/ThreadFactoryBuilder.html#setNameFormat-java.lang.String-
worker_name_format = "xrpc-worker-%d"

# The size of the boss thread group which handles incoming requests.
boss_thread_count = 4
# The size of the worker thread group which processes requests and sends the results to clients.
worker_thread_count = 40
# The core size of the thread pool used for async health checks (how many threads to keep running
# even when idle). This should be zero unless you explicitly add asynchronous checks, and should
# usually be 1 or 2 at most.
# See http://metrics.dropwizard.io/4.0.0/apidocs/com/codahale/metrics/health/annotation/Async.html
# for documentaton on making checks asynchronous.
async_health_check_thread_count = 0

# The maximum number of concurrent connections to accept at once before dropping new connections.
# Set to zero to disable connection limiting.
max_connections = 2000

# The maximum number of requests per second to allow before limiting new connection.
# See: http://google.github.io/guava/releases/23.0/api/docs/com/google/common/util/concurrent/RateLimiter.html
# Once the soft limit is hit, the server will return a HTTP 429 TOO MANY REQUESTS
# If the hard limit is reached, the system will block to protect the back end resources

## Pool size should be approximately the same number of unique clients expected during a steady state condition
rate_limiter_pool_size = 24

# This is the per server rate limiter
soft_req_per_sec = 500.0
hard_req_per_sec = 550.0

## This is the global rate limiter
global_soft_req_per_sec = 700.0
global_hard_req_per_sec = 750.0

## Override rate limiter for a single client. This does not impact the global rate limiter
## Syntax is  [{ <ip> : "<soft_limit>:<hard limit> }]
req_per_second_override = [
  {"127.0.0.1" : "500:550" }
]

# Enable the desired metrics reporters
slf4j_reporter = false
slf4j_reporter_polling_rate = 30

jmx_reporter = true

console_reporter = false
console_reporter_polling_rate = 30

# IP Black List
enable_black_list = false
ip_black_list = []

# IP White List
enable_white_list = false
ip_white_list = []

# Default Content-Type
# This is used when no Accept or Content-Type header is given or the Accept header or Content-Type header
# does not map to any supported Encoding/Decoding.  This value will be used to lookup the default
# Encoder/Decoder based on those registered.
#
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept for Response Encoding
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type for Request Decoding
default_content_type = "application/json"

# CORS
# Refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
cors {
  # true to turn on CORS support
  enable = false

  # The origin parameter specifies a URI that may access the resource. The browser must enforce this.
  # For requests without credentials, the server may specify "*" as a wildcard,
  # thereby allowing any origin to access the resource.
  allowed_origins = []

  # The Access-Control-Allow-Headers header is used in response to a preflight request to indicate
  # which HTTP headers can be used when making the actual request.
  allowed_headers = []

  # The Access-Control-Allow-Methods header specifies the method or methods allowed when accessing the resource.
  # This is used in response to a preflight request.
  allowed_methods = []

  # The Access-Control-Allow-Credentials header Indicates whether or not the response to the request can be exposed
  # when the credentials flag is true.  When used as part of a response to a preflight request, this indicates
  # whether or not the actual request can be made using credentials (aware of HTTP cookies and HTTP Authentication
  # information). Note that simple GET requests are not preflighted, and so if a request is made for a resource
  # with credentials, if this header is not returned with the resource, the response is ignored by the browser
  # and not returned to web content.
  allow_credentials = false

  # Specifies that a CORS request should be rejected if it's invalid before being further processing.
  # CORS headers are set after a request is processed. This may not always be desired
  # and this setting will check that the Origin is valid and if it is not valid no
  # further processing will take place, and a error will be returned to the calling client.
  short_circuit = false
}

# TLS Config class can be found here
# https://github.com/xjdr/xio/blob/v0.13.1/xio-core/src/main/java/com/xjeffrose/xio/SSL/TlsConfig.java
tls {
  # Each certificate in this collection is used as a trusted CA cert
  x509TrustedCertPaths = []

  # Define a path to your certificate expected in PEM format
  # If x509CertPath OR privateKeyPath are undefined then a self signed certificate will be generated
  # x509CertPath = ""

  # Define a path to the accompanying private key for your certificate expected in PKCS#8 format
  # If x509CertPath OR privateKeyPath are undefined then a self signed certificate will be generated
  # privateKeyPath = ""

  # TAKE NOTE: the ordering of this collection is important!
  #   this client/server certificate -> intermediate1 cert -> intermediateN cert -> root CA cert
  x509CertChainPaths = []

  # true - all connections use ssl
  # false - all connections are in cleartext
  useSsl = true

  # true - log a warning for this server if useSsl is false
  # false - don't log (use this for tests and if you absolutely need cleartext)
  logInsecureConfig = true

  # If true, use OpenSsl; false, use JDK internals.
  useOpenSsl = true

  alpn {
    # Defaults taken from https:#github.com/netty/netty/blob/4.1/example/src/main/java/io/netty/example/http2/helloworld/server/Http2Server.java
    # https:#netty.io/4.1/api/io/netty/handler/ssl/ApplicationProtocolConfig.Protocol.html
    protocol = "ALPN"
    # https:#netty.io/4.1/api/io/netty/handler/ssl/ApplicationProtocolConfig.SelectorFailureBehavior.html
    # NO_ADVERTISE is currently the only mode supported by both OpenSsl and JDK providers.
    selectorBehavior = "NO_ADVERTISE"
    # https:#netty.io/4.1/api/io/netty/handler/ssl/ApplicationProtocolConfig.SelectedListenerFailureBehavior.html
    # ACCEPT is currently the only mode supported by both OpenSsl and JDK providers.
    selectedBehavior = "ACCEPT"
    # https:#netty.io/4.1/api/io/netty/handler/ssl/ApplicationProtocolNames.html
    supportedProtocols = [
      # This list must be sorted in order from highest preference to lowest preference
      "h2"
      "http/1.1"
    ]
  }

  # https:#netty.io/4.1/api/io/netty/handler/ssl/SslContextBuilder.html#ciphers-java.lang.Iterable-
  # not empty list - filter the set with https:#netty.io/4.1/api/io/netty/handler/ssl/SupportedCipherSuiteFilter.html
  # empty list - use the default set of ciphers
  ciphers = [
    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
    "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
    "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
  ]

  # https:#netty.io/4.1/api/io/netty/handler/ssl/ClientAuth.html
  clientAuth = "OPTIONAL"

  # https:#netty.io/4.1/api/io/netty/handler/ssl/SslContextBuilder.html#enableOcsp-boolean-
  enableOcsp = false

  # https:#netty.io/4.1/api/io/netty/handler/ssl/SslContextBuilder.html#protocols-java.lang.String...-
  # use the default protocol suite
  protocols = ["TLSv1.2"]

  # https:#netty.io/4.1/api/io/netty/handler/ssl/SslContextBuilder.html#sessionCacheSize-long-
  # use the default size
  sessionCacheSize = 0

  # https:#netty.io/4.1/api/io/netty/handler/ssl/SslContextBuilder.html#sessionTimeout-long-
  # use the default timeout
  sessionTimeout = 0
}
