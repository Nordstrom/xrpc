# Default configuration for an xrpc application.

# The port to run on.
server.port = 8080

admin_routes = {
  # If true, serve informational admin routes. See https://github.com/Nordstrom/xrpc#admin-routes .
  enable_info = true
  # If true, serve unsafe admin routes. See https://github.com/Nordstrom/xrpc#admin-routes .
  enable_unsafe = false
}

# The maximum allowed time between reads before timing out. Set to zero to disable read timeouts.
reader_idle_timeout_seconds = 200
# The maximum allowed time between writes before timing out. Set to zero to disable write timeouts.
writer_idle_timeout_seconds = 400
# The maximum allowed time between either read or write before timing out. Set to zero to disable
# this kind of timeout.
all_idle_timeout_seconds = 0

# The thread name format. See:
# http://google.github.io/guava/releases/23.0/api/docs/com/google/common/util/concurrent/ThreadFactoryBuilder.html#setNameFormat-java.lang.String-
worker_name_format = "xrpc-worker-%d"

# The size of the boss thread group which handles incoming requests.
boss_thread_count = 4
# The size of the worker thread group which processes requests and sends the results to clients.
worker_thread_count = 40

# The maximum number of concurrent connections to accept at once before dropping new connections.
# Set to zero to disable connection limiting.
max_connections = 2000

# The maximum number of requests per second to allow before limiting new connection.
# See: http://google.github.io/guava/releases/23.0/api/docs/com/google/common/util/concurrent/RateLimiter.html
# Once the soft limit is hit, the server will return a HTTP 429 TOO MANY REQUESTS
# If the hard limit is reached, the system will block to protect the back end resources

## Pool size should be approximately the same number of unique clients expected during a steady state condition
rate_limiter_pool_size = 24

# This is the per server rate limiter
soft_req_per_sec = 500.0
hard_req_per_sec = 550.0

## This is the global rate limiter
global_soft_req_per_sec = 700.0
global_hard_req_per_sec = 750.0

## Override rate limiter for a single client. This does not impact the global rate limiter
## Syntax is  [{ <ip> : "<soft_limit>:<hard limit> }]
req_per_second_override = [
  {"127.0.0.1" : "500:550" }
]

# Enable the desired metrics reporters
slf4j_reporter = false
slf4j_reporter_polling_rate = 30

jmx_reporter = true

console_reporter = false
console_reporter_polling_rate = 30

# IP Black List
enable_black_list = false
ip_black_list = []

# IP White List
enable_white_list = false
ip_white_list = []

# CORS
# Refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
cors {
  # true to turn on CORS support
  enable = false

  # The origin parameter specifies a URI that may access the resource. The browser must enforce this.
  # For requests without credentials, the server may specify "*" as a wildcard,
  # thereby allowing any origin to access the resource.
  allowed_origins = []

  # The Access-Control-Allow-Headers header is used in response to a preflight request to indicate
  # which HTTP headers can be used when making the actual request.
  allowed_headers = []

  # The Access-Control-Allow-Methods header specifies the method or methods allowed when accessing the resource.
  # This is used in response to a preflight request.
  allowed_methods = []

  # The Access-Control-Allow-Credentials header Indicates whether or not the response to the request can be exposed
  # when the credentials flag is true.  When used as part of a response to a preflight request, this indicates
  # whether or not the actual request can be made using credentials (aware of HTTP cookies and HTTP Authentication
  # information). Note that simple GET requests are not preflighted, and so if a request is made for a resource
  # with credentials, if this header is not returned with the resource, the response is ignored by the browser
  # and not returned to web content.
  allow_credentials = false

  # Specifies that a CORS request should be rejected if it's invalid before being further processing.
  # CORS headers are set after a request is processed. This may not always be desired
  # and this setting will check that the Origin is valid and if it is not valid no
  # further processing will take place, and a error will be returned to the calling client.
  short_circuit = false
}

# Path to x509 certificate to use for TLS. Set to the absolute path of a X509 certificate in UTF-8 encoded PEM format.
# If this path and 'cert', below, are both configured, this path will be used and 'cert' will be ignored.
# Throws a runtime error if a cert cannot be read from this path.
#path_to_cert = "/path/to/cert.txt"

# Path to private key to use for TLS. Set to the absolute path of an RSA private key in UTF-8 encoded PEM format.
# If this path and 'key', below, are both configured, this path will be used and 'key' will be ignored.
# Throws a runtime error if a key cannot be read from this path.
#path_to_key = "/path/to/key.txt"

# The raw X509 certificate to use for TLS.
# This will only be used if path_to_cert, above, is not configured.
cert = """
-----BEGIN CERTIFICATE-----
MIIDEDCCAnmgAwIBAgIJAO4gmvLYMMccMA0GCSqGSIb3DQEBBQUAMGQxCzAJBgNV
BAYTAlVTMQswCQYDVQQIEwJJTDEQMA4GA1UEBxMHQ2hpY2FnbzENMAsGA1UEChME
eGlvMjEMMAoGA1UECxMDZGV2MRkwFwYDVQQDExB4aW8yLmV4YW1wbGUuY29tMB4X
DTE1MDgxMjE5MzUwOVoXDTE4MDYwMTE5MzUwOVowZDELMAkGA1UEBhMCVVMxCzAJ
BgNVBAgTAklMMRAwDgYDVQQHEwdDaGljYWdvMQ0wCwYDVQQKEwR4aW8yMQwwCgYD
VQQLEwNkZXYxGTAXBgNVBAMTEHhpbzIuZXhhbXBsZS5jb20wgZ8wDQYJKoZIhvcN
AQEBBQADgY0AMIGJAoGBALE1ScG8WfneBnfo44uKgKEBTyMIoFW1SzQn3hkV8Pj/
clF7wdRYruzwvL4FbvQWBzurRyUvjWyScdv9IecS0xXTmeJGlTfxhmdlhHVwdFQa
Xd0cvJuotor/7cs0MxiWHPl/k7X/s846IDw7x/27I/Wh4Q3F+mT9oaljCd9hHn57
AgMBAAGjgckwgcYwHQYDVR0OBBYEFP0sRxdfrg1yqo6Q9UdSlOcC4+v6MIGWBgNV
HSMEgY4wgYuAFP0sRxdfrg1yqo6Q9UdSlOcC4+v6oWikZjBkMQswCQYDVQQGEwJV
UzELMAkGA1UECBMCSUwxEDAOBgNVBAcTB0NoaWNhZ28xDTALBgNVBAoTBHhpbzIx
DDAKBgNVBAsTA2RldjEZMBcGA1UEAxMQeGlvMi5leGFtcGxlLmNvbYIJAO4gmvLY
MMccMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEArIDxvkqZyWNdykA4
6F5VdT64OvGsKb4mZNEF/nypq4U29w5f/JEAsp3jwVTqqI7Xgk7OeUXIyWJZBAga
oq4hs6yvhrcLApdHoWI+2aOevtIh00P8QBmp4Ibbmh657ZWc3u8OsHGQ03ldpFXJ
8eV4C/fb9jLnd/I1unwJULz1/vs=
-----END CERTIFICATE-----
"""

# The private key to use for TLS.
# This will only be used if path_to_key, above, is not configured.
key = """
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCxNUnBvFn53gZ36OOLioChAU8jCKBVtUs0J94ZFfD4/3JRe8HU
WK7s8Ly+BW70Fgc7q0clL41sknHb/SHnEtMV05niRpU38YZnZYR1cHRUGl3dHLyb
qLaK/+3LNDMYlhz5f5O1/7POOiA8O8f9uyP1oeENxfpk/aGpYwnfYR5+ewIDAQAB
AoGAY3sNz+PkAwCgUvp7mx+CvGAWxA0YrWTcNghXh2+o2q/UxmeaVZH/iWZQHsDA
G+it4NJzWy3Jz/SaVKxTNvx7YKoEizihsw0aL1t9LaVqX3DWsp+ePRn1jxIxZqNe
92Hrl9rACvM7caa7zLAiu9zcdl39zmIXvPXVHKn6O5AMx0ECQQDsD27iwSrk7vWW
igxDtlIKy3T1WJB/fTI5lHbinAKL+mUO0NRQ/cVz/w0FuFN4VKYCcL15Kis7hGr2
O5oNM0jbAkEAwC08mYS+TCHnLp1/KmPkog4yiBcWbM389nf+1OF1EZ9OvNC7A4IZ
UcHVPB5uMYX4QlfsKHLolGQomnkpOLlC4QJAeRGBQXLo2Pllo4uxtpivgzHODncZ
xQkk1Ts7rgVtmPUXF34rJk7BEjjhKOnchX6ElgPUaWwjOCc15Iu0+sguuQJAcMNa
dp5MZzHRjCnAL2h0BJ8eCXq6ntdzok+gyNsOLWvz8Jjt004oey+oZmFYuVhp5sve
d5GNZV0r8hA8HtueIQJBAJQR+eWTcwLga1vtn10RL1YfNqyC4fismcDbYXXJc1NI
7W85HF8N9OzsxZEsYAt0ogTpg5UdHmGvv0mUZdTh0mU=
-----END RSA PRIVATE KEY-----
"""
