buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    classpath "com.uber:infer-plugin:0.7.4"
  }
}

plugins {
  id 'com.github.sherter.google-java-format' version '0.6'
  id 'net.researchgate.release' version '2.4.0'
  id "com.github.spotbugs" version "1.6.0"
}

release {
  preTagCommitMessage = 'Updating to release version '
  tagCommitMessage = 'New release: '
  newVersionCommitMessage = 'Creating new SNAPSHOT version '
  git {
    pushToRemote = 'upstream'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'

// Junit 5 gradle runner.
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'com.nordstrom.xrpc'
archivesBaseName = 'xrpc'

description = """Simple, production ready Java API server built on top of functional composition."""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // The tls package uses a ton of proprietary APIs that generate warnings. Suppress these (and fork
    // the compiler so that the definition works).
    options.compilerArgs += ['-XDignore.symbol.file']
    options.fork = true
    options.forkOptions.executable = 'javac'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:21.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.squareup.okio:okio:1.13.0'
    compile 'com.typesafe:config:1.3.1'
    compile 'io.dropwizard.metrics:metrics-core:3.2.5'
    compile 'io.dropwizard.metrics:metrics-healthchecks:3.2.5'
    compile 'io.dropwizard.metrics:metrics-json:3.2.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.2'
    compile 'io.netty:netty-all:4.1.19.Final'
    compile 'io.netty:netty-tcnative-boringssl-static:2.0.7.Final'
    compile 'io.netty:netty-transport-native-epoll:4.1.19.Final'
    compile 'io.netty:netty-transport-native-kqueue:4.1.19.Final'
    compile 'org.projectlombok:lombok:1.16.16'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'com.github.spotbugs:spotbugs:3.1.0'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.1'
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.1'
    testCompile 'org.mockito:mockito-core:2.13.0'
}

// Run with the latest checkstyle version. Required for our checkstyle.xml.
checkstyle {
  toolVersion '8.3'
}

spotbugs {
  toolVersion = '3.1.0'
}

// Configure Maven upload.

// Add Javadoc + sources jars.
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

// Sign artifacts.
signing {
    // Only sign release versions.
    required { !version.endsWith('-SNAPSHOT') }
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      // Safe aliases for username & password that don't require them to be set in order to load the
      // project.
      def ossrhUsername = rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : ''
      def ossrhPassword = rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : ''

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      // Snapshots by default publish local. If you want to publish to Sonatype, use the
      // commented-out configuration below. Note that you won't be able to resolve snapshots in
      // other projects unless you add the repository to the appropriate configuration block.
      //
      // snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
      //   authentication(userName: ossrhUsername, password: ossrhPassword)
      // }
      snapshotRepository(url: mavenLocal().url)

      pom.project {
        name 'xrpc library'
        packaging 'jar'
        // Optionally artifactId can be defined here, instead of relying on archivesBaseName.
        description 'Simple, production ready Java API server built on top of functional composition.'
        url 'https://github.com/Nordstrom/xrpc'

        scm {
          connection 'scm:git:git@github.com:Nordstrom/xrpc.git'
          developerConnection 'scm:git:git@github.com:Nordstrom/xrpc.git'
          url 'https://github.com/Nordstrom/xrpc'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'jkinkead'
            name 'Jesse Kinkead'
            email 'jesse.kinkead@nordstrom.com'
          }
          developer {
            id 'xjdr'
            name 'Jeff Rose'
            email 'jeff.rose@nordstrom.com'
          }
        }
      }
    }
  }
}

// Run the upload as a part of the "release" task.
afterReleaseBuild.dependsOn uploadArchives
