buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
  }
}

plugins {
  id 'net.researchgate.release' version '2.4.0'
}

release {
  preTagCommitMessage = 'Updating to release version '
  tagCommitMessage = 'New release: '
  newVersionCommitMessage = 'Creating new SNAPSHOT version '
  git {
    pushToRemote = 'upstream'
  }
}

apply plugin: 'checkstyle'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
// Junit 5 gradle runner.
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'com.nordstrom.xrpc'
archivesBaseName = 'xrpc'

description = """Simple, production ready Java API server built on top of functional composition."""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // The tls package uses a ton of proprietary APIs that generate warnings. Suppress these (and fork
    // the compiler so that the definition works).
    options.compilerArgs += ['-XDignore.symbol.file']
    options.fork = true
    options.forkOptions.executable = 'javac'
}

repositories {
     maven { url 'http://repo.maven.apache.org/maven2' }
}

dependencies {
    compile 'com.google.guava:guava:21.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.squareup.okio:okio:1.13.0'
    compile 'com.typesafe:config:1.3.1'
    compile 'io.dropwizard.metrics:metrics-core:3.2.2'
    compile 'io.netty:netty-all:4.1.15.Final'
    compile 'io.netty:netty-tcnative-boringssl-static:2.0.6.Final'
    compile 'io.netty:netty-transport-native-epoll:4.1.15.Final'
    compile 'org.projectlombok:lombok:1.16.16'
    compile 'org.slf4j:slf4j-api:1.7.25'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.1'
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.1'
}

// Run with the latest checkstyle version. Required for our checkstyle.xml.
checkstyle {
  toolVersion '8.3'
}

// Configure Maven upload.

// Add Javadoc + sources jars.
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

// Sign artifacts.
signing {
    sign configurations.archives
}

 uploadArchives {

   repositories {
     mavenDeployer {
       beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

       repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
         authentication(userName: ossrhUsername, password: ossrhPassword)
       }

       snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
         authentication(userName: ossrhUsername, password: ossrhPassword)
       }

       pom.project {
         name 'xrpc library'
         packaging 'jar'
         // Optionally artifactId can be defined here, instead of relying on archivesBaseName.
         description 'Simple, production ready Java API server built on top of functional composition.'
         url 'https://github.com/Nordstrom/xrpc'

         scm {
           connection 'scm:git:git@github.com:Nordstrom/xrpc.git'
           developerConnection 'scm:git:git@github.com:Nordstrom/xrpc.git'
           url 'https://github.com/Nordstrom/xrpc'
         }

         licenses {
           license {
             name 'The Apache License, Version 2.0'
             url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
           }
         }

         developers {
           developer {
             id 'jkinkead'
             name 'Jesse Kinkead'
             email 'jesse.kinkead@nordstrom.com'
           }
           developer {
             id 'xjdr'
             name 'Jeff Rose'
             email 'jeff.rose@nordstrom.com'
           }
         }
       }
     }
   }
}

// Run the upload as a part of the "release" task.
afterReleaseBuild.dependsOn uploadArchives
